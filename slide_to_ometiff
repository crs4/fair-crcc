#!/usr/bin/env python3


# Authors: Luca Pireddu and Martin Kačenga

import argparse
import os
import sys
import time
import xml.etree.ElementTree as ET

from contextlib import contextmanager
from pathlib import Path
from typing import Any, Mapping

import pyvips
from pyvips import Image


@contextmanager
def time_block():
    start_time = time.time()
    try:
        yield
    finally:
        end_time = time.time()
        print("Running time: {:02f}".format(end_time - start_time), file=sys.stderr)


def print_progress(progress) -> None:
    print(f"percent = {progress.percent}%; run time = {progress.run}s; ETA = {progress.eta}s", file=sys.stderr)
    if progress.percent == 100:
        print("Progress is 100%, but it'll take a bit longer it finish up.", file=sys.stderr)


def parse_args(args=None):
    parser = argparse.ArgumentParser(
        description="Convert from a supported openslide format to BigTIFF")

    parser.add_argument("original", type=Path, metavar="SOURCE")
    parser.add_argument("output", type=Path, metavar="DEST")

    parser.add_argument('-c', '--compression', default='jpeg',
                        choices=("none", "jpeg", "deflate", "packbits", "ccittfax4", "lzw", "webp", "zstd", "jp2k"))

    def quality_value(x):
        x = int(x)
        if x <= 0:
            raise argparse.ArgumentTypeError("Quality value must be > 0")
        return x
    parser.add_argument('-q', '--quality', type=quality_value)

    parser.add_argument('-p', '--pyramid', action='store_true', help="Generate pyramid")
    parser.add_argument('-t', '--tile-size', type=int, default=512)
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="Be more verbose. Prints progress information from libvips")

    opts = parser.parse_args(args)

    return opts


ome_xml_template = """<?xml version="1.0" encoding="UTF-8"?>
<OME xmlns="http://www.openmicroscopy.org/Schemas/OME/2016-06"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.openmicroscopy.org/Schemas/OME/2016-06 http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd">
    <Image ID="Image:0">
        <Pixels ID="Pixels:0"
                DimensionOrder="XYZCT"
                Interleaved="false"
                SizeZ="1"
                SizeC="1"
                SizeT="1"
                SignificantBits="8"
                Type="uint8">
         <Channel ID="Channel:0:0" SamplesPerPixel="3">
            <LightPath/>
         </Channel>
         <TiffData IFD="0" PlaneCount="1" />
        </Pixels>
    </Image>
</OME>"""


def create_ome_xml(image: pyvips.Image, opts) -> bytes:
    ns = {"OME": "http://www.openmicroscopy.org/Schemas/OME/2016-06"}
    ET.register_namespace(*tuple(*ns.items()))
    root = ET.fromstring(ome_xml_template)

    root.insert(0, ET.Comment(
        """Warning: this comment is an OME-XML metadata block, which contains\n"""
        """crucial dimensional parameters and other important metadata. Please edit\n"""
        """cautiously (if at all), and back up the original data before doing so.\n"""
        """For more information, see the OME-TIFF documentation:\n"""
        """https://docs.openmicroscopy.org/latest/ome-model/ome-tiff/\n"""))

    pixels_node = root.find("OME:Image", ns).find("OME:Pixels", ns)
    pixels_node.set("SizeX", str(image.width))
    pixels_node.set("SizeY", str(image.height))

    if image.get("openslide.mpp-x") and image.get("openslide.mpp-y"):
        # Find the Pixels element and insert the microns per pixel
        pixels_node.set("PhysicalSizeX", image.get("openslide.mpp-x"))
        pixels_node.set("PhysicalSizeXUnit", "µm")
        pixels_node.set("PhysicalSizeY", image.get("openslide.mpp-y"))
        pixels_node.set("PhysicalSizeYUnit", "µm")

    structured_annotations = ET.SubElement(root, "OME:StructuredAnnotations")

    # Add original metadata as subelements of root
    append_metadata_annotations(image, structured_annotations)

    # if we're creating a pyramid, add pyramid metadata
    if opts.pyramid:
        structured_annotations.append(
            create_pyramid_metadata(image.width, image.height, opts.tile_size))

    return ET.tostring(root, xml_declaration=True, encoding='utf-8')


def append_metadata_annotations(image: pyvips.Image, parent: ET.Element) -> ET.Element:
    metadata = extract_metadata(image)
    counter = 0
    for key, value in metadata.items():
        xml_annotation = ET.SubElement(parent, "OME:XMLAnnotation",
                                       attrib={"Namespace": "openmicroscopy.org/OriginalMetadata"})
        xml_annotation.set("ID", "Annotation:" + str(counter))
        counter += 1
        # The contents of an OME:XMLAnnotation are not processed as OME XML
        # but should still be well-formed XML
        val = ET.SubElement(xml_annotation, "OME:Value")
        original_metadata = ET.SubElement(val, "OriginalMetadata")
        k = ET.SubElement(original_metadata, "Key")
        k.text = key
        v = ET.SubElement(original_metadata, "Value")
        v.text = value


def create_pyramid_metadata(width: int, height: int, tile_size: int) -> ET.Element:
    pyramid_annotation = ET.Element("OME:MapAnnotation",
                                    attrib={
                                        "ID": "Annotation:Resolution:0",
                                        "Namespace": "openmicroscopy.org/PyramidResolution"})
    val = ET.SubElement(pyramid_annotation, "OME:Value")
    layer_index = 0
    while width > tile_size or height > tile_size:
        width = int(width / 2)
        height = int(height / 2)
        layer_index += 1
        layer_element = ET.SubElement(val, "OME:M", attrib={"K": str(layer_index)})
        layer_element.text = f"{width} {height}"

    return pyramid_annotation


def extract_metadata(image: pyvips.Image) -> Mapping[str, Any]:
    image_format = image.get('openslide.vendor')
    if image_format == "mirax":
        metadata = {f.rsplit('.', 1)[1]: image.get(f)
                    for f in image.get_fields() if f.startswith('mirax.GENERAL')}
    elif image_format == "aperio":
        metadata = {f.rsplit('.', 1)[1]: image.get(f)
                    for f in image.get_fields() if f.startswith('aperio')}
    elif image_format == "hamamatsu":
        metadata = {f.split('.', 1)[1]: image.get(f)
                    for f in image.get_fields() if f.startswith('hamamatsu')}

    return metadata


def main(args=None):
    """
    openslide to OME-TIFF conversion using pyvips.
    """
    opts = parse_args(args)

    image = Image.openslideload(str(opts.original), access="sequential")

    # openslide will add an alpha ... drop it
    if image.hasalpha():
        image = image[:-1]

    # set minimal OME metadata
    image.set_type(pyvips.GValue.gstr_type, "image-description", create_ome_xml(image, opts))
    # We're not create a multi-page TIFF, so I suspect we shouldn't be setting the page-height property
    # image.set_type(pyvips.GValue.gint_type, "page-height", image.height)

    output_args = {
        'bigtiff': True,
        'tile': True,
        'tile_width': opts.tile_size,
        'tile_height': opts.tile_size,
        'properties': False,
        'compression': opts.compression,
        'pyramid': False,
        'subifd': False,
    }

    if opts.pyramid:
        output_args['pyramid'] = True
        output_args['depth'] = 'onetile'
        # subifd is required for OME-TIFF style pyramids, where the pyramid layers
        # are stored in the same page as the original image
        output_args['subifd'] = True

    if opts.quality:
        output_args['Q'] = opts.quality

    if opts.verbose:
        os.environ['VIPS_PROGRESS'] = "1"
        image.set_progress(True)

        last_progress_update = None

        def eval_callback(_, progress):
            nonlocal last_progress_update
            if last_progress_update != progress.percent:
                last_progress_update = progress.percent
                print_progress(progress)
        image.signal_connect('eval', eval_callback)

    print("Writing the tiff.  Arguments:", output_args, file=sys.stderr)
    image.tiffsave(str(opts.output), **output_args)


if __name__ == "__main__":
    with time_block():
        main(sys.argv[1:])
